{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { AppEnums } from '../models/AppEnums';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-toastr\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json',\n    'skey': 'my-auth-token',\n    Accept: 'application/json'\n  })\n};\nexport let AppService = /*#__PURE__*/(() => {\n  class AppService {\n    constructor(http, toastr) {\n      this.http = http;\n      this.toastr = toastr;\n      this.setAuthUser(this.getSessionUser());\n    }\n    /**\n    * Get bearer token\n    */\n\n\n    getBearerToken() {\n      let idToken = null;\n\n      if (this.getAuthUser()) {\n        idToken = this.getAuthUser().token;\n      } else {\n        idToken = this.getSessionUser().token;\n      }\n\n      return idToken;\n    }\n\n    logout() {\n      sessionStorage.removeItem('user');\n    }\n\n    setAuthUser(authUser) {\n      this.authUser = authUser;\n    }\n\n    getAuthUser() {\n      return this.authUser;\n    }\n\n    setSessionUser(authUser) {\n      sessionStorage.setItem('user', JSON.stringify(authUser));\n    }\n\n    getSessionUser() {\n      let userString = sessionStorage.getItem('user');\n      let sessionUser = JSON.parse(userString);\n      return sessionUser;\n    }\n\n    makePostRequest(fullUrl, data) {\n      if (this.getAuthUser()) {\n        httpOptions.headers = httpOptions.headers.set('skey', this.getAuthUser().token);\n      } else {\n        httpOptions.headers = httpOptions.headers.set('skey', this.getSessionUser().token);\n      }\n\n      return this.http.post(fullUrl, data, httpOptions);\n    }\n\n    makeCreateUserRequest(fullUrl, data) {\n      return this.http.post(fullUrl, data, httpOptions);\n    }\n\n    makeLoginRequest(fullUrl, data) {\n      return this.http.post(fullUrl, data, httpOptions);\n    }\n\n    makeGetRequest(fullUrl) {\n      if (this.getAuthUser()) {\n        httpOptions.headers = httpOptions.headers.set('skey', this.getAuthUser().token);\n      } else {\n        httpOptions.headers = httpOptions.headers.set('skey', this.getSessionUser().token);\n      }\n\n      return this.http.get(fullUrl, httpOptions);\n    }\n\n    showToastMessage(alertType, alertTitle, alertMessage) {\n      switch (alertType) {\n        case AppEnums.ToastTypeSuccess:\n          return this.toastr.success(alertMessage, alertTitle);\n          break;\n\n        case AppEnums.ToastTypeInfo:\n          return this.toastr.info(alertMessage, alertTitle);\n          break;\n\n        case AppEnums.ToastTypeWarning:\n          return this.toastr.warning(alertMessage, alertTitle);\n          break;\n\n        case AppEnums.ToastTypeError:\n          return this.toastr.error(alertMessage, alertTitle);\n          break;\n      }\n    }\n\n  }\n\n  AppService.ɵfac = function AppService_Factory(t) {\n    return new (t || AppService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ToastrService));\n  };\n\n  AppService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AppService,\n    factory: AppService.ɵfac,\n    providedIn: 'root'\n  });\n  return AppService;\n})();","map":null,"metadata":{},"sourceType":"module"}